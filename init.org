#+property: header-args :tangle "init.el"
#+startup: content indent

* .org to .el
** コマンド
org-babel-tangle
** ショートカット
C-c C-v t

* My init el configure
** header
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
  ;; profile
  ;;(require 'profiler)
  ;;(profiler-start 'cpu)
#+end_src

** Kind of OS determine
#+begin_src emacs-lisp
  (defconst IS-MAC (eq system-type 'darwin))
  (defconst IS-LINUX (memq system-type '(gnu gnu/linux gnu/kfreebsd berkeley-unix)))
  (defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
#+end_src

** GC
#+begin_src emacs-lisp
  (setq gc-cons-percentage 0.2
        gc-cons-threshold (* 128 1024 1024))
  (add-hook 'focus-out-hook #'garbage-collect)
  (setq garbage-collection-messages t)

  ;; magic file name
  (defconst my-saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist my-saved-file-name-handler-alist)))
#+end_src

** environment to Japanese, UTF-8
#+begin_src emacs-lisp
  (setenv "LANG" "ja_JP.UTF-8")
  (prefer-coding-system 'utf-8-unix)
  (set-file-name-coding-system 'cp932)
  (setq locale-coding-system 'utf-8-unix)
  ;; Determine the DECODING setting of process-coding-system by determining the character encoding output by the process.
  (when IS-WINDOWS
    (setq-default default-process-coding-system '(utf-8-unix . japanese-cp932-dos)))
#+end_src

** 曜日/日付フォーマットは英語表示にしたい
org-scheduleなどで有効
>= emacs 28
#+begin_src emacs-lisp
  (setq system-time-locale "C")
#+end_src

** native-compの警告を表示しない
#+begin_src emacs-lisp
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src

** add-to list
#+begin_src emacs-lisp
  (add-to-list 'exec-path "C:/software/msys2/ucrt64/bin") ; ediff を使えるように
#+end_src

** use-package
use-packageを有効化する  
melpaはstableを優先する  
最新パッケージの場合、NT Emacsではうまく動かない場合がある  
#+begin_src emacs-lisp
  (eval-and-compile
    (require 'package)
    (package-initialize)
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)

    ;; set package-archives priority
    (setq package-archive-priorities
          '(("melpa-stable" . 10)
            ("melpa" . 5)
            ("gnu" . 5)))

    (setq package-install-upgrade-built-in t)
    (setq package-native-compile t)

    ;; use-package
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t)
    (setq use-package-compute-statistics t) ;; For "M-x use-package-report"

    (require 'use-package))
#+end_src

** vc-use-package
[[https://github.com/slotThe/vc-use-package]]  
2023-05-16にEmacsのマスターへ取り込まれている  
emacs 30+を使っている場合、インストール不要で「:vc」を利用できる  
#+begin_src emacs-lisp
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package)
#+end_src

** useful to IME
#+begin_src emacs-lisp
  (when (eq window-system 'w32)
    (use-package tr-ime
      :defer 0.01
      :config
      (tr-ime-standard-install)
      (setq default-input-method "W32-IME")
      (w32-ime-initialize)
      ;; IME のモードライン表示設定
      (setq-default w32-ime-mode-line-state-indicator "[--]")
      (setq w32-ime-mode-line-state-indicator-list '("[--]" "[あ]" "[--]"))
      ;; IME Init
      (w32-ime-initialize)
      ;; IME Control (Turn off IME when typing yes/no, etc)
      (wrap-function-to-control-ime 'universal-argument t nil)
      (wrap-function-to-control-ime 'read-string nil nil)
      (wrap-function-to-control-ime 'read-char nil nil)
      (wrap-function-to-control-ime 'read-from-minibuffer nil nil)
      (wrap-function-to-control-ime 'y-or-n-p nil nil)
      (wrap-function-to-control-ime 'yes-or-no-p nil nil)
      (wrap-function-to-control-ime 'map-y-or-n-p nil nil)
      (wrap-function-to-control-ime 'register-read-with-preview nil nil)))
#+end_src

** so-long
長い行を含むファイルの最適化する
[[https://ayatakesi.github.io/emacs/28.1/html/Long-Lines.html]]
#+begin_src emacs-lisp
  (use-package so-long
    :ensure nil
    :init
    (global-so-long-mode))
#+end_src

** Optimizing performance
**** プロセスからの出力の受信
[[https://ayatakesi.github.io/lispref/25.2/html/Output-from-Processes.html]]
いくつかのシステムではEmacsがサブプロセスの出力を読み取る際に出力データを非常に小さいブロックで読み取るために、
結果として潜在的に非常に貧弱なパフォーマンスとなることがある。
この挙動は変数process-adaptive-read-bufferingを非nil値(デフォルト)にセットして拡張することにより改善し得る。
これにより、そのようなプロセスからの読み取りを自動的に遅延して、Emacsが読み取りを試みる前に出力がより多く生成されるようになる。
#+begin_src emacs-lisp
  (setq process-adaptive-read-buffering t)
#+end_src
**** 閉じ括弧を入力しても点滅させない
from protesilaos
#+begin_src emacs-lisp
  (setq blink-matching-paren nil)
#+end_src
**** vcのバックエンドをGitのみに変更
from protesilaos
#+begin_src emacs-lisp
  (setq vc-handled-backends '(Git))
#+end_src

**** ファイル検索を2回行わないようにする
from doomemacs
#+begin_src emacs-lisp
  (setq auto-mode-case-fold nil)
#+end_src

**** 双方向の並び替えを抑制する
from doomemacs
#+begin_src emacs-lisp
  (setq-default bidi-display-reordering 'left-to-right)
#+end_src

**** 長い行の双方向スキャン
from doomemacs
#+begin_src emacs-lisp
  (setq bidi-inhibit-bpa t)
#+end_src

**** フォーカスされていないウィンドウのカーソルを削除
from doomemacs
#+begin_src emacs-lisp
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)
#+end_src

**** 高速なスクロール
from doomemacs
#+begin_src emacs-lisp
  (setq fast-but-imprecise-scrolling t)
#+end_src

**** ドメインにpingを送信しない
from doomemacs
#+begin_src emacs-lisp
  (setq ffap-machine-p-known 'reject)
#+end_src

**** UIの更新頻度を下げる
from doomemacs
#+begin_src emacs-lisp
  (setq idle-update-delay 1.0)
#+end_src

**** 不要なフォント表示化を抑制
from doomemacs
#+begin_src emacs-lisp
  (setq redisplay-skip-fontification-on-input t)
#+end_src

**** Windowsの最適化
from doomemacs
#+begin_src emacs-lisp
  (when IS-WINDOWS
    (setq w32-get-true-file-attributes nil
          w32-pipe-read-delay 0
          w32-pipe-buffer-size (* 64 1024)))
#+end_src

**** 各OSの最適化
from Centaur Emacs
#+begin_src emacs-lisp
  (when IS-WINDOWS
    (setq w32-use-native-image-API t))
  (unless IS-MAC
    (setq command-line-ns-option-alist nil))
  (unless IS-LINUX
    (setq command-line-x-option-alist nil))
#+end_src

** フォントの設定
fontaineを使ってフォントを設定する.
「CommitMono Nerd Font Mono/Italic」を使用している.
[[https://github.com/ryanoasis/nerd-fonts]]
#+begin_src emacs-lisp
  (use-package fontaine
    :defer 1
    :config
    (cond (IS-LINUX
           (setq fontaine-presets
                 '((regular
                    :default-family "CommitMono Nerd Font Mono"
                    :fixed-pitch-family "CommitMono Nerd Font Mono"
                    :variable-pitch-family "CommitMono Nerd Font Mono"
                    :italic-family "CommitMono Nerd Font Mono Italic")
                   (large
                    :default-family "CommitMono Nerd Font Mono"
                    :variable-pitch-family "CommitMono Nerd Font Mono"))))

          (IS-WINDOWS
           (setq fontaine-presets
                 '((regular
                    :default-family "CommitMono Nerd Font Mono"
                    :fixed-pitch-family "CommitMono Nerd Font Mono"
                    :variable-pitch-family "CommitMono Nerd Font Mono"
                    :italic-family "CommitMono Nerd Font Mono")
                   (large
                    :default-family "CommitMono Nerd Font Mono"
                    :variable-pitch-family "CommitMono Nerd Font Mono")))))

    (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))
    (add-hook 'kill-emacs-hook #'fontaine-store-latest-preset))
#+end_src

** アイコン
nerd-iconsを使用している
[[https://github.com/rainstormstudio/nerd-icons.el]]
#+begin_src emacs-lisp
  (use-package nerd-icons
    :defer 0.5)
  (use-package nerd-icons-completion
    :hook (after-init . nerd-icons-completion-mode))
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
  (use-package nerd-icons-corfu
    :vc ( :fetcher github :repo "LuigiPiucco/nerd-icons-corfu")
    :after (corfu nerd-icons)
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** ダッシュボード
アイコンにはストレイライトのロゴを利用している.
emacs-dashboardは読み込みが遅すぎたのでやめた。
比較的軽量なwelcome-dashboardを使っている。
#+begin_src emacs-lisp
  (use-package welcome-dashboard
    :vc ( :fetcher github :repo "konrad1977/welcome-dashboard")
    :config
    (setq
     welcome-dashboard-latitude 35.4660694   ;; latitude and longitude must be set to show weather information
     welcome-dashboard-longitude 139.6226196
     welcome-dashboard-use-nerd-icons t      ;; Use nerd icons instead of all-the-icons
     welcome-dashboard-image-file "~/.emacs.d/logo/straylight_mark.png"
     welcome-dashboard-image-width 250
     welcome-dashboard-image-height 250
     welcome-dashboard-title (concat "Welcome " " Ore "))
    (welcome-dashboard-create-welcome-hook))

  (with-eval-after-load 'welcome-dashboard
    ;; RET/o/C-x 数字 を全部外す
    (dolist (key '("RET" "<return>" "o"))
      (define-key welcome-dashboard-mode-map (kbd key) nil))
    (dotimes (i 10)                           ; 0〜9
      (unless (zerop i)                       ; C-x 0 は存在しないので除外
        (define-key welcome-dashboard-mode-map
                    (kbd (format "C-x %d" i)) nil))))

#+end_src

** corfu
[[https://github.com/minad/corfu]]
#+begin_src emacs-lisp
  (use-package corfu
    :defer 1
    :demand t
    :hook (prog-mode . (lambda ()
                         (global-set-key [remap c-indent-line-or-region] #'indent-for-tab-command)))
    :config
    (setopt corfu-cycle t
            corfu-auto t
            corfu-auto-delay 0.0
            corfu-auto-prefix 2
            corfu-on-exact-match 'show)

    (global-corfu-mode)

    (with-eval-after-load 'lsp-mode
      (setopt lsp-completion-provider :none))

    (with-eval-after-load 'orderless
      (defun my/orderless-for-corfu ()
        (setq-local orderless-matching-styles '(orderless-flex)))

      (add-hook 'corfu-mode-hook #'my/orderless-for-corfu))
    :custom
    ;; https://github.com/minad/corfu?tab=readme-ov-file#configuration
    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    ;; 参考 : https://www.grugrut.net/posts/202408192021/
    (text-mode-ispell-word-completion . nil))
#+end_src

** corfu-popup
[[https://github.com/minad/corfu/blob/main/extensions/corfu-popupinfo.el]]
corfuに含まれています
「ensure: nil」を入れておかないと、melpaへ問い合わせしてダウンロードを試みます
結果、パッケージが見つからないエラーを出力するので注意が必要です
#+begin_src emacs-lisp
  (use-package corfu-popupinfo
    :ensure nil
    :hook (corfu-mode . corfu-popupinfo-mode))
#+end_src

** corfu-magic
emacs備忘録(2024)より
[[https://qiita.com/nobuyuki86/items/122e85b470b361ded0b4#corfu-magic]]
#+begin_src emacs-lisp
  (with-eval-after-load 'corfu
    (setq corfu-preselect 'prompt)

    (define-key corfu-map (kbd "TAB") 'corfu-next)
    (define-key corfu-map (kbd "<tab>") 'corfu-next)
    (define-key corfu-map (kbd "S-TAB") 'corfu-previous)
    (define-key corfu-map (kbd "<backtab>") 'corfu-previous)

    (defvar corfu--index)
    (defvar corfu-magic-insert-or-next-line
      `(menu-item "" nil :filter ,(lambda (&optional _)
                                    (when (>= corfu--index 0)
                                      'corfu-insert)))
      "If we made a selection during `corfu' completion, select it.")
    (define-key corfu-map (kbd "RET") corfu-magic-insert-or-next-line)

    (defvar corfu-magic-cancel-or-backspace
      `(menu-item "" nil :filter ,(lambda (&optional _)
                                    (when (>= corfu--index 0)
                                      'corfu-reset)))
      "If we made a selection during `corfu' completion, cancel it.")
    (define-key corfu-map (kbd "DEL") corfu-magic-cancel-or-backspace)
    (define-key corfu-map (kbd "<backspace") corfu-magic-cancel-or-backspace))
#+end_src

** cape
[[https://github.com/minad/cape]]
capeはEmacsの組み込み補完機能を拡張するパッケージ.
corfuで利用されている
#+begin_src emacs-lisp
  (use-package cape
    :defer 1
    :config
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
    (advice-add 'eglot-completion-at-point :around #'cape-wrap-nonexclusive)
    (advice-add 'lsp-completion-at-point :around #'cape-wrap-buster)
    (advice-add 'lsp-completion-at-point :around #'cape-wrap-nonexclusive)
    (advice-add 'lsp-completion-at-point :around #'cape-wrap-noninterruptible)

    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src

*** dabbrevのサイズを制限
#+begin_src emacs-lisp
  (setq dabbrev-friend-buffer-function (lambda (other-buffer)
                                         (< (buffer-size other-buffer) (* 1024 1024))))
#+end_src

*** TABで補完を表示する
#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
#+end_src

** vertico
#+begin_src emacs-lisp
  (use-package vertico
    :defer 1
    :init
    (setq vertico-cycle t)
    (vertico-mode))
#+end_src

**** vertico-repeat
https://github.com/minad/vertico/blob/main/extensions/vertico-repeat.el
verticoに含まれています
「ensure: nil」を入れておかないと、melpaへ問い合わせしてダウンロードを試みます
結果、パッケージが見つからないエラーを出力するので注意が必要です
#+begin_src emacs-lisp
  (use-package vertico-repeat
    :ensure nil
    :after vertico
    :hook (minibuffer-setup . vertico-repeat-save))
#+end_src

**** vertico-directory
https://github.com/minad/vertico/blob/main/extensions/vertico-directory.el
verticoに含まれています
「ensure: nil」を入れておかないと、melpaへ問い合わせしてダウンロードを試みます
結果、パッケージが見つからないエラーを出力するので注意が必要です
#+begin_src emacs-lisp
  (use-package vertico-directory
    :ensure nil
    :after vertico
    :bind ( :map vertico-map
            ("<backspace>" . vertico-directory-delete-char)))
#+end_src

**** vertico-buffer
https://github.com/minad/vertico/blob/main/extensions/vertico-buffer.el
verticoに含まれています
「ensure: nil」を入れておかないと、melpaへ問い合わせしてダウンロードを試みます
結果、パッケージが見つからないエラーを出力するので注意が必要です
#+begin_src emacs-lisp
  (use-package vertico-buffer
    :ensure nil
    :after vertico
    :config
    (setq vertico-buffer-display-action '(display-buffer-at-bottom))
    (vertico-buffer-mode))
#+end_src

**** Prefix current candidate with arrow
#+begin_src emacs-lisp
  (defvar +vertico-current-arrow t)

  (cl-defmethod vertico--format-candidate :around
    (cand prefix suffix index start &context ((and +vertico-current-arrow
                                                   (not (bound-and-true-p vertico-flat-mode)))
                                              (eql t)))
    (setq cand (cl-call-next-method cand prefix suffix index start))
    (let ((arrow (nerd-icons-faicon "nf-fa-hand_o_right")))
      (if (bound-and-true-p vertico-grid-mode)
          (if (= vertico--index index)
              (concat arrow " " cand)
            (concat #("_" 0 1 (display " ")) cand))
        (if (= vertico--index index)
            (concat " " arrow " " cand)
          (concat "    " cand)))))
#+end_src

**** vertico-truncate
#+begin_src emacs-lisp
  (use-package vertico-truncate
    :after vertico
    :vc ( :fetcher github :repo "jdtsmith/vertico-truncate")
    :config
    (vertico-truncate-mode))
#+end_src

** orderless
#+begin_src emacs-lisp
  (use-package orderless
    :defer 1
    :config
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides nil)

    (with-eval-after-load 'migemo
      ;; orderlessをmigemo対応
      (defun orderless-migemo (component)
        (let ((pattern (downcase (migemo-get-pattern component))))
          (condition-case nil
              (progn (string-match-p pattern "") pattern)
            (invalid-regexp nil))))
      (add-to-list 'orderless-matching-styles 'orderless-migemo))

    (with-eval-after-load 'corfu
      (defun orderless-fast-dispatch (word index total)
        (and (= index 0) (= total 1) (length< word 4)
             'orderless-literal-prefix))

      (orderless-define-completion-style orderless-fast
        (orderless-style-dispatchers '(orderless-fast-dispatch))
        (orderless-matching-styles '(orderless-flex)))

      (defun my/setup-corfu-for-orderless ()
        (setq-local corfu-auto-delay 0
                    corfu-auto-prefix 1
                    completion-styles '(orderless-fast)))

      (add-hook 'corfu-mode-hook #'my/setup-corfu-for-orderless)))
#+end_src

** prescient
#+begin_src emacs-lisp
  (use-package prescient
    :defer 1
    :config
    (setq prescient-aggressive-file-save t)
    (prescient-persist-mode))

#+end_src

** vertico-prescient
#+begin_src emacs-lisp
  (use-package vertico-prescient
    :after (vertico prescient)
    :config
    (setq vertico-prescient-enable-filtering nil)
    (vertico-prescient-mode))
#+end_src

** corfu-prescient
#+begin_src emacs-lisp
  (use-package corfu-prescient
    :after (corfu prescient)
    :config
    (setq corfu-prescient-enable-filtering nil)
    (corfu-prescient-mode))
#+end_src

** consult-line-migemo
CMigemoへ入力した文章をconsult-lineへ渡し、migemo検索を行う関数
#+begin_src emacs-lisp
  (with-eval-after-load 'consult
    (defun consult--migemo-regexp-compiler (input type &rest _config)
      (setq input (migemo-get-pattern input))
      (cons (mapcar (lambda (x) (consult--convert-regexp x type))
                    (split-string input " +" t))
            (lambda (str)
              (string-match-p input str))))

    (defun consult-line-migemo ()
      (interactive)
      (let ((consult--regexp-compiler #'consult--migemo-regexp-compiler))
        (consult-line)))

    (global-set-key (kbd "C-s") #'consult-line-migemo))
#+end_src

** consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :defer 1
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)                                 ;; orig. repeat-complex-command
           ([remap switch-to-buffer] . consult-buffer)                           ;; orig. switch-to-buffer
           ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)   ;; orig. switch-to-buffer-other-frame
           ([remap bookmark-jump] . consult-bookmark)                            ;; orig. bookmark-jump
           ([remap project-switch-to-buffer] . consult-project-buffer)           ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g
           :map goto-map
           ("e" . consult-compile-error)
           ("f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("g" . consult-goto-line)             ;; orig. goto-line
           ("M-g" . consult-goto-line)           ;; orig. goto-line
           ("o" . consult-outline)               ;; Alternative: consult-org-heading
           ("m" . consult-mark)
           ("k" . consult-global-mark)
           ("i" . consult-imenu)
           ("I" . consult-imenu-multi)
           ;; M-s
           :map search-map
           ("d" . consult-fd)
           ("D" . consult-locate)
           ("g" . consult-grep)
           ("G" . consult-git-grep)
           ("r" . consult-ripgrep)
           ("l" . consult-line)
           ("L" . consult-line-multi)
           ("m" . consult-multi-occsur)
           ("k" . consult-keep-lines)
           ("u" . consult-focus-lines)
           ("e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-s e" . consult-isearch-hisstory)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                   ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 1.0 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help))
#+end_src

** marginalia
vertico の候補に情報を追加する.
#+begin_src emacs-lisp
  (use-package marginalia
    :defer 1
    :init
    (marginalia-mode))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :config
    (when IS-WINDOWS
      (setq magit-refresh-status-buffer nil)
      (setq auto-revert-buffer-list-filter
            'magit-auto-revert-repository-buffer-p)
      (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
      (remove-hook 'server-switch-hook 'magit-commit-diff)
      (remove-hook 'with-editor-filter-visit-hook 'magit-commit-diff)))
#+end_src

** diff-hl
ウィンドウの左側にコミットされていない箇所を強調表示する
#+begin_src emacs-lisp
  (use-package diff-hl
    :defer 2
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh)
           (dired-mode . diff-hl-dired-mode))
    :init
    (global-diff-hl-mode)
    (global-diff-hl-show-hunk-mouse-mode)
    (diff-hl-margin-mode))
#+end_src
*** difftastic
Emacsでdifftasticを使用できるようにする.
通常のコマンドとしても使用でき、magitにも統合
#+begin_src emacs-lisp
  (use-package difftastic
    :defer 2
    :demand t
    :bind (:map magit-blame-read-only-mode-map
                ("D" . difftastic-magit-show)
                ("S" . difftastic-magit-show))
    :config
    (eval-after-load 'magit-diff
      '(transient-append-suffix 'magit-diff '(-1 -1)
         [("D" "Difftastic diff (dwim)" difftastic-magit-diff)
          ("S" "Difftastic show" difftastic-magit-show)])))

#+end_src

** whick-key
キーバインドの可視化
#+begin_src emacs-lisp
  (use-package which-key
    :defer 1
    :config
    (which-key-mode))
#+end_src

** undo
*** undo-fua
Emacsのundoとredoを強化するパッケージです
#+begin_src emacs-lisp
  (use-package undo-fu
    :defer 2)
#+end_src

*** undo-fu-session
undo情報をEmacs終了後も保持してくれるようになる
#+begin_src emacs-lisp
  (use-package undo-fu-session
    :defer 2
    :config
    (undo-fu-session-global-mode))
#+end_src

*** vundo
undo履歴を視覚的に分かりやすく表示してくれる
[[https://github.com/casouri/vundo]]
#+begin_src emacs-lisp
  (use-package vundo
    :defer 2)
#+end_src

** rg
#+begin_src emacs-lisp
  (use-package rg
    :defer 2)
#+end_src

** modus-themes
#+begin_src emacs-lisp
  (use-package modus-themes
    :demand t
    :config
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui t
          modus-themes-disable-other-themes t)

    (setq modus-themes-completions
          '((t . (underline))))

    (setq modus-themes-common-palette-overrides
          '((fg-completion-match-0 blue)
            (fg-completion-match-1 magenta-warmer)
            (fg-completion-match-2 cyan)
            (fg-completion-match-3 red)
            (bg-completion-match-0 bg-blue-nuanced)
            (bg-completion-match-1 bg-magenta-nuanced)
            (bg-completion-match-2 bg-cyan-nuanced)
            (bg-completion-match-3 bg-red-nuanced)))

    ;;(load-theme 'modus-operandi-tinted t)
    (load-theme 'modus-vivendi-tinted t))
#+end_src

** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :defer 1
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

** lin
hl-line-mode を強化するパッケージ
#+begin_src emacs-lisp
  (use-package lin
    :defer 1
    :init
    (setq lin-face 'lin-red)
    (lin-global-mode))
#+end_src

** pulsar
カーソルの移動を視覚的に分かりやすくしてくれる
#+begin_src emacs-lisp
  (use-package pulsar
    :defer 1
    :config
    (pulsar-global-mode))
#+end_src

** goggles
何処に貼り付けたのかとか、視覚的に目立ちやすくする
[[https://github.com/minad/goggles]]
#+begin_src emacs-lisp
  (use-package goggles
    :defer 1
    :hook ((prog-mode text-mode) . goggles-mode)
    :config
    (setq-default goggles-pulse t)) ;; set to nil to disable pulsing
#+end_src

** spacious-padding
スペースを設定して、見やすくします。
[[https://github.com/protesilaos/spacious-padding?tab=readme-ov-file]]
#+begin_src emacs-lisp
  (use-package spacious-padding
    :defer 1
    :config
    (setq spacious-padding-widths
          '( :internal-border-width 15
             :header-line-width 4
             :mode-line-width 6
             :tab-width 2
             :right-divider-width 30
             :scroll-bar-width 8))

    ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
    ;; is very flexible and provides several examples.
    (setq spacious-padding-subtle-mode-line
          `( :mode-line-active 'default
             :mode-line-inactive vertical-border))

    (spacious-padding-mode))
#+end_src

** perfect-mergin
バッファが1つの時、中央に表示します。2つ以上の時は通常の表示に戻ります。
[[https://github.com/mpwang/perfect-margin]]
#+begin_src emacs-lisp
  (use-package perfect-margin
    :defer 1
    :config
    (setq perfect-margin-ignore-filters nil)
    (setq perfect-margin-only-set-left-margin t)
    (perfect-margin-mode))
#+end_src

** breadcrumb
バッファ上部にパンくずリストを表示してくれます。
#+begin_src emacs-lisp
  (use-package breadcrumb
    :defer 1
    :vc ( :fetcher github :repo "joaotavora/breadcrumb")
    :config
    (breadcrumb-mode))
#+end_src

** rainbow-delimiters
括弧に色を付けて見やすくします。
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :defer 1
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** imenu-list
#+begin_src emacs-lisp
  (use-package imenu-list
    :defer 1
    :init
    (setq imenu-list-position 'left))
#+end_src

** autorevert
Check for file updates and update buffers as well.
#+begin_src emacs-lisp
  (use-package autorevert
    :defer 3
    :hook (after-init . global-auto-revert-mode))
#+end_src

** hungry-delete
空白とか、いっぱい消す
#+begin_src emacs-lisp
  (use-package hungry-delete
    :defer 3
    :hook
    (after-init . global-hungry-delete-mode)
    :config
    (setq hungry-delete-chars-to-skip " \t\f\v"))
#+end_src

** treemacs
treemacs
左側にディレクトリを表示し、ファイルを開いたりできます。
perfect-marginと互換性があります。
[[https://github.com/Alexander-Miller/treemacs]]
#+begin_src emacs-lisp
  (use-package treemacs
    :defer 1
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    (with-eval-after-load 'treemacs
      (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-files-by-mouse-dragging    t
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  ;; treemacs-nerd-icons
  ;(use-package treemacs-nerd-icons
  ;  :config
  ;  (treemacs-load-theme "nerd-icons"))

  ;; treemacs-projectile
  (use-package treemacs-projectile
    :after (treemacs projectile))

  ;; treemacs-icons-dired
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  ;; treemacs-magit
  (use-package treemacs-magit
    :after (treemacs magit))

  ;; reemacs-persp
  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :config (treemacs-set-scope-type 'Perspectives))

  ;; treemacs-tab-bar
  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :config (treemacs-set-scope-type 'Tabs))
#+end_src

* Programing language config
** c/c++ mode
#+begin_src emacs-lisp
  (use-package cc-mode
    :defer 1
    :config
    (setq c-default-style "bsd")
    (setq c-basic-offset 2)       ; basic indent value
    (setq tab-width 2)            ; tab width
    (setq indent-tabs-mode nil)   ; indent use space.
    (c-set-offset 'innamespace 0) ; namespace indent pos is 0
    )
#+end_src

** clang-format
「.clang-format」はユーザーフォルダの直下にあれば良い様子
#+begin_src emacs-lisp
  (use-package clang-format
    :commands (clang-format-buffer clang-format-on-save-mode)
    :hook ((c-mode . clang-format-on-save-mode)
           (c++-mode . clang-format-on-save-mode))
    :config
    (setq clang-format-style "file")           ; .clang-format を参照
    (setq clang-format-fallback-style "none")) ; .clang-format がない場合は何もしない
#+end_src

** glsl-mode
#+begin_src emacs-lisp
  (use-package glsl-mode
    :defer 5
    :config
    (add-to-list 'auto-mode-alist '("\.vsh$" . glsl-mode))
    (add-to-list 'auto-mode-alist '("\.fsh$" . glsl-mode)))
#+end_src

** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :defer 3
    :mode ("\\.md\\'" . gfm-mode)
    ;; need to installed "pandoc.exe" and set environment path for pandoc.exe.
    :config
    (when (eq system-type 'windows-nt)
      (setq markdown-command "pandoc.exe -s --standalone --metadata pagetitle=markdown -t html5 -c https://cdn.jsdelivr.net/npm/github-markdown-css@3.0.1/github-markdown.css"))
    (unless (eq system-type 'windows-nt)
      (setq markdown-command "pandoc -s --standalone --metadata pagetitle=markdown -t html5 -c https://cdn.jsdelivr.net/npm/github-markdown-css@3.0.1/github-markdown.css"))
    (setq markdown-fontify-code-blocks-natively t))
#+end_src

** cmake-mode
#+begin_src emacs-lisp
  (use-package cmake-mode
    :defer 1)
#+end_src

** Dart-mode
#+begin_src emacs-lisp
  (use-package dart-mode
    :defer 1)
#+end_src

** Java
eglotよりも先に読み込む必要があるっぽいです。
eglot単体の場合、jdtlsをPATHから探します。
eglot-javaが読み込まれていると上述処理を上書きし、jdtlsの最新バージョンをダウンロードしてくれます。
#+begin_src emacs-lisp
  (use-package eglot-java
    :ensure t
    :demand t
    :config
    (eglot-java-mode))
#+end_src

eglot-javaがjdtlsを起動する際にlombok.jarを引数として追加します。
vcパラメータ等が上手く動かなかったのでダウンロードして配置しました。
参考: https://github.com/ltylty/eglot-java-lombok
#+begin_src emacs-lisp
  (use-package eglot-java-lombok
    :demand t
    :load-path "~/.emacs.d/external/eglot-java-lombok"
    :config
    (eglot-java-lombok/init))
#+end_src

** elisp
*** highlight-defined
既知のシンボルに色を付けてくれます。
[[https://github.com/Fanael/highlight-defined]]
#+begin_src emacs-lisp
  (use-package highlight-defined
    :defer 1
    :hook (emacs-lisp-mode . highlight-defined-mode))
#+end_src

*** highlight-quoted
引用符と引用記号を色付けしてくれます。
[[https://github.com/Fanael/highlight-quoted]]
#+begin_src emacs-lisp
  (use-package highlight-quoted
    :defer 1
    :hook (emacs-lisp-mode . highlight-quoted-mode))
#+end_src

** About web
*** web-mode
#+begin_src emacs-lisp
  (use-package web-mode
    :defer 1)
#+end_src

** editorconfig
30.1から、editorconfigはemacs masterに統合されたらしい
統合されているのなら、ensure nilにしないとmelpaなどから取得してしまう。
#+begin_src emacs-lisp
  (use-package editorconfig
  :defer 2
  :ensure nil
  :config
  (editorconfig-mode)
  (setq editorconfig-exec-path "~/.emacs.d/editorconfig/.editorconfig"))
#+end_src

** eglot config
*** eglot
#+begin_src emacs-lisp
  (progn
    (customize-set-variable 'eglot-autoshutdown t)
    (customize-set-variable 'eglot-extend-to-xref t)
    (customize-set-variable 'eglot-ignored-server-capabilities
                            (quote (:documentFormattingProvider :documentRangeFormattingProvider)))

    (with-eval-after-load 'eglot
      ;; timeout
      (setq eglot-connect-timeout 120)

      ;; c/c++
      (add-to-list 'eglot-server-programs
                   '((c-mode c++-mode c-ts-mode c++-ts-mode c-or-c++-ts-mode)
                     . ("clangd"
                        "-j=2"
                        "--log=error"
                        "--background-index=false"
                        "--clang-tidy"
                        "--cross-file-rename"
                        "--completion-style=detailed"
                        "--pch-storage=disk"
                        "--header-insertion=never"
                        "--header-insertion-decorators=0")))
      ;; Java
      ;; project.elはemacs標準のvc.elを使ってgitを検索している
      ;; (locate-dominating-file default-directory ".git")
      ;; 上述のS式をjavaファイルなどを開いているバッファで実行(M-:)すると、ルートディレクトリが分かる
      ;; Gradle/Maven の自動 import を止め、初期化を軽量化します。
      (setq eglot-java-jdtls-settings
      '((java.import.gradle.enabled . :json-false)
        (java.import.maven.enabled  . :json-false)))

      ;; Language Serverからの進捗を表示するか否か
      (setq eglot-report-progress nil))

    (with-eval-after-load 'flymake
      (define-key flymake-mode-map (kbd "C-c ! n") nil)
      (define-key flymake-mode-map (kbd "C-c ! p") nil)
      (define-key flymake-mode-map (kbd "C-c n") 'flymake-goto-next-error)
      (define-key flymake-mode-map (kbd "C-c p") 'flymake-goto-prev-error))

    (add-hook 'c++-mode-hook
              (lambda ()
                (eglot-ensure)
                (message "called c++-mode-hook")
                (setq c-default-style "bsd")
                (setq c-basic-offset 2)         ; basic indent value
                (setq tab-width 2)              ; tab width
                (setq indent-tabs-mode nil)     ; indent use space.
                (c-set-offset 'innamespace 0)   ; namespace indent pos is 0
                ))
    (add-hook 'c-mode-hook
              (lambda ()
                (eglot-ensure)
                (message "called c-mode-hook")
                (setq c-default-style "bsd")
                (setq c-basic-offset 2)         ; basic indent value
                (setq tab-width 2)              ; tab width
                (setq indent-tabs-mode nil)     ; indent use space.
                (c-set-offset 'innamespace 0)   ; namespace indent pos is 0
                ))
    (add-hook 'java-mode-hook
              (lambda ()
                (eglot-ensure)
                (message "called java-mode-hook")
                )))
#+end_src

*** eglot-booster
[[https://github.com/jdtsmith/eglot-booster]]
emacsとlspサーバ間の通信速度を向上させるプログラムらしい
elispとは別で以下のリポジトリからバイナリファイルも必要になる
ダウンロード後、配置したらパスを通す
[[https://github.com/blahgeek/emacs-lsp-booster]]
#+begin_src emacs-lisp
  (use-package eglot-booster
    :after eglot
    :vc ( :fetcher github :repo "jdtsmith/eglot-booster")
    :config
    (eglot-booster-mode))
#+end_src

*** consult-eglot
consultとeglotを統合するパッケージ。シンボルの検索が行えるようになる。
[[https://github.com/mohkale/consult-eglot]]
#+begin_src emacs-lisp
  (use-package consult-eglot
    :after eglot
    :bind
    ("C-c s" . consult-eglot-symbols))
#+end_src

*** jsonrpc
jsonを扱うEmacsの標準パッケージ
標準パッケージなのでensure nilして、パッケージを取得しないようにしている
デフォルトのタイムアウト時間が短いため、タイムアウトしないように時間を延ばしている
また、ログを無視するように設定し、パフォーマンスを向上させている。
#+begin_src emacs-lisp
  (use-package jsonrpc
    :ensure nil
    :config
    (setq jsonrpc-default-request-timeout 3000)
    (fset #'jsonrpc--log-event #'ignore))
#+end_src

*** eglot-x
eglotでサポートされる機能が増える
#+begin_src emacs-lisp
  (use-package eglot-x
    :vc ( :fetcher github :repo "nemethf/eglot-x")
    :after eglot
    :config
    (eglot-x-setup))

#+end_src

*** eldoc-box
ミニバッファのeldocをposframeで表示してくれる
#+begin_src emacs-lisp
  (use-package eldoc-box
    :defer 1
    :hook (eglot-managed-mode . eldoc-box-hover-mode))
#+end_src

*** eglot-signature-eldoc-talkative
eldocの情報を追加する
#+begin_src emacs-lisp
  (use-package eglot-signature-eldoc-talkative
    :after eldoc-box
    :config
    (advice-add #'eglot-signature-eldoc-function
                :override #'eglot-signature-eldoc-talkative))
#+end_src

** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure nil
    :defer 1
    :init
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq lsp-keymap-prefix "M-l")
    (setq lsp-headerline-breadcrumb-enable nil
          lsp-enable-file-watchers nil
          lsp-enable-folding nil
          lsp-enable-symbol-highlighting nil
          lsp-enable-text-document-color nil
          lsp-enable-indentation nil
          lsp-enable-on-type-formatting nil
          lsp-auto-execute-action nil
          lsp-before-save-edits nil))

#+end_src

*** symbol-overlay
emacsの組み込み関数を利用してシンボルをハイライトする
#+begin_src emacs-lisp
  (use-package symbol-overlay
    :defer 1
    :hook (prog-mode . symbol-overlay-mode))
#+end_src

*** emacs-lsp-booster
eglot-boosterの親. 高速化するらしい
[[https://github.com/blahgeek/emacs-lsp-booster]]
#+begin_src emacs-lisp
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  (advice-add (if (progn (require 'json)
                         (fboundp 'json-parse-buffer))
                  'json-parse-buffer
                'json-read)
              :around
              #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
              (setcar orig-result command-from-exec-path))
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src

** dap
*** dape
lldb-dapを用いてデバッグを行う
#+begin_src emacs-lisp
  ;; dape
  (use-package dape
    :defer 1
    :bind-keymap
    ("C-x C-a" . dape-global-map)
    :config
    ;; Global bindings for setting breakpoints with mouse
    (dape-breakpoint-global-mode)
    ;; Showing inlay hints
    (setq dape-inlay-hints t)
    ;; Pulse source line (performance hit)
    (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line))
#+end_src

*** cmake-build
自作パッケージ  
emacsからCMakeを用いたビルドをサポートするツール  
#+begin_src emacs-lisp
  (use-package cmake-build
    :vc (:fetcher github :repo IwachanOrigin/cmake-build)
    :defer 1)
#+end_src

*** dape-cmake
自作パッケージ  
ビルドした実行ファイルをdapeで比較的簡単にデバッグ実行できるようにするツール  
#+begin_src emacs-lisp
(use-package dape-cmake
    :vc (:fetcher github :repo IwachanOrigin/dape-cmake))
#+end_src

*** repeat
dape-modeを使う場合、repeat-modeを有効にするとエルゴノミクス的な視点で便利  
dapeはデフォルトでC-x C-a を起点としてステップイン・ステップオーバーなどを定義している  
repeat-modeを使えば、C-x C-a n を何度も実行しなくても n だけで進めることが出来る  
#+begin_src emacs-lisp
  (use-package repeat
    :after dape
    :config
    (repeat-mode))
#+end_src

** rst
#+begin_src emacs-lisp
  (use-package rst
    :defer 2
    :load-path "~/.emacs.d/external/rst"
    :config
    (add-to-list 'auto-mode-alist '("\.rst$" . rst-mode))
    (add-to-list 'auto-mode-alist '("\.rest$" . rst-mode))
    (setq frame-background-mode 'dark)
    (add-hook 'rst-mode-hook #'(lambda() (setq indent-tabs-mode nil))))
#+end_src

** hlsl-mode.el
#+begin_src emacs-lisp
  (use-package hlsl-mode
    :defer 5
    :load-path "~/.emacs.d/external/hlsl"
    :config
    (add-to-list 'auto-mode-alist '("\.fx$" . hlsl-mode))
    (add-to-list 'auto-mode-alist '("\.fxh$" . hlsl-mode))
    (add-to-list 'auto-mode-alist '("\.hlsl$" . hlsl-mode))
    (setq frame-background-mode 'dark)
    (add-hook 'hlsl-mode-hook #'(lambda() (setq indent-tabs-mode nil))))
#+end_src
* Custom functions
** pandocを利用して、マークダウンからスライドを生成する関数
pandoc, latex, elsvogel.latexを導入する必要がある
[[https://github.com/enhuiz/eisvogel][eisvogel.latex]]
#+begin_src emacs-lisp
  (defun pandoc-markdown-slides-pdf ()
    "create beamer slides from pandoc, latex."
    (interactive)
    (setq infilename (buffer-file-name))
    (setq outfilename (replace-regexp-in-string ".md" ".pdf" infilename))
    (when (eq system-type 'windows-nt)
      (setq cmd-str (concat "pandoc.exe " infilename " -o " outfilename " --from markdown --to beamer --template eisvogel.latex --listings --pdf-engine \"xelatex\" -V CJKmainfont=\"Meiryo UI\"")))
    (unless (eq system-type 'windows-nt)
      (setq cmd-str (concat "pandoc " infilename " -o " outfilename " --from markdown --to beamer --template eisvogel.latex --listings --pdf-engine \"xelatex\" -V CJKmainfont=\"Noto Sans CJK JP\"")))
    (shell-command-to-string cmd-str))
  (global-set-key (kbd "C-x C-l") 'pandoc-markdown-slides-pdf)
#+end_src

** pandocを利用して、現在のバッファをPDFにして保存する関数
#+begin_src emacs-lisp
  (defun pandoc-buffer-pdf ()
    "create buffer to pdf."
    (interactive)
    (let* ((buffer-content (buffer-string))
           (tempfile (make-temp-file "pandoc-buffer" nil ".md"))
           (outfilename (concat (file-name-sans-extension tempfile) ".pdf"))
           (cmd-str (if (eq system-type 'windows-nt)
                        (format "pandoc.exe \"%s\" -o \"%s\" --pdf-engine=xelatex -V documentclass=bxjsarticle -V classoption=pandoc" tempfile outfilename)
                      (format "pandoc.exe \"%s\" -o \"%s\" --pdf-engine=xelatex -V documentclass=bxjsarticle -V classoption=pandoc" tempfile outfilename))))
      (with-temp-file tempfile
        (insert buffer-content))
      (shell-command-to-string cmd-str)
      (message "PDF created: %s" outfilename)))
#+end_src

** 画面に表示している100文字くらいの線表示のON/OFFをトグルする関数
#+begin_src emacs-lisp
  (defun toggle-display-fill-column-indicator-mode ()
    "toggle display-fill-column-indicator-mode"
    (interactive)
    (cond (display-fill-column-indicator-mode (display-fill-column-indicator-mode -1))
          (t (display-fill-column-indicator-mode 1))))
  (global-set-key (kbd "C-c h") 'toggle-display-fill-column-indicator-mode)
#+end_src

** プライマリモニターの解像度の70%に設定し、emacsのウィンドウを中央に配置する関数
#+begin_src emacs-lisp
  (defun my-setup-frame-size-and-position ()
    "プライマリモニターの解像度の70%に設定し、中央に配置します。"
    (let* ((monitor-attrs (car (display-monitor-attributes-list)))  ; プライマリモニターの情報を取得
           (geometry (alist-get 'geometry monitor-attrs))           ; モニターのジオメトリ（位置とサイズ）
           (screen-width (nth 2 geometry))                          ; ディスプレイの幅（ピクセル）
           (screen-height (nth 3 geometry))                         ; ディスプレイの高さ（ピクセル）
           (char-width (frame-char-width))                          ; 1文字の幅（ピクセル）
           (char-height (frame-char-height))                        ; 1文字の高さ（ピクセル）
           (frame-width (round (/ (* 0.7 screen-width) char-width))) ; フレーム幅（文字単位）
           (frame-height (round (/ (* 0.7 screen-height) char-height))) ; フレーム高さ（文字単位）
           (frame-left (round (/ (- screen-width (* frame-width char-width)) 2))) ; 左端位置
           (frame-top (round (/ (- screen-height (* frame-height char-height)) 2)))) ; 上端位置
      ;; default-frame-alistに設定を追加
      (add-to-list 'default-frame-alist `(width . ,frame-width))
      (add-to-list 'default-frame-alist `(height . ,frame-height))
      (add-to-list 'default-frame-alist `(left . ,frame-left))
      (add-to-list 'default-frame-alist `(top . ,frame-top))))

  ;; Adjusted config when run emacs
  (my-setup-frame-size-and-position)
#+end_src

* Enhance C-s settings
** migemo
This package can use the Roman alphabet to search  the japanese language.  
We need to install cmigemo for Windows [migemo-kaoriya-64](https://www.kaoriya.net/software/cmigemo/)  
Please add path cmigemo.exe.  
#+begin_src emacs-lisp
  (use-package migemo
    :defer 1
    :config
    ;; use to C/Migemo
    (setq migemo-command "cmigemo")
    (setq migemo-options '("-q" "--emacs" "-i" "\a"))
    ;; The following description is the art of treating relative paths as absolute paths
    ;; (expand-file-name "~/.emacs.d/init.el")
    ;; dictionary path and charset encoding
    (when IS-WINDOWS
      (setq migemo-dictionary (expand-file-name "~/.emacs.d/cmigemo-default-win64/dict/cp932/migemo-dict"))
      (setq migemo-coding-system 'cp932-unix))
    (unless IS-WINDOWS
      (setq migemo-dictionary (expand-file-name "~/.emacs.d/cmigemo-default-win64/dict/utf-8/migemo-dict"))
      (setq migemo-coding-system 'utf-8-unix))
    (setq migemo-user-dictionary nil)
    (setq migemo-regex-dictionary nil)

    :config
    (migemo-init))
#+end_src

** savehist
保存されたコマンドの履歴を使うための設定
#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

** Hydra config
*** helper func to hydra menu
#+begin_src emacs-lisp
  (defun my/hydra-disable-dimmer ()
    (when (bound-and-true-p dimmer-mode)
      (dimmer-mode -1)))

  (defun my/hydra-enable-dimmer ()
    (unless (bound-and-true-p dimmer-mode)
      (dimmer-mode 1)))
#+end_src

*** hydra
#+begin_src emacs-lisp
  (use-package hydra
    :defer 2
    :bind ("C-c SPC" . hydra-shortcut-of-emacs/body))

      ;; shortcut key map of emacs
  (defhydra hydra-shortcut-of-emacs (:hint nil
                                           :pre (my/hydra-disable-dimmer)
                                           :post (my/hydra-enable-dimmer))
    "
  ^
  ^shortcut-of-emacs(M-C は C-Mと同じ)
  ^
  ^Move^                            ^Select^                              ^Others^
  ^-----------------------------------------------------------------------------------------------
  _M-<_: バッファの先頭へ移動    _C-x h_: 全選択                      _M-x replace-string_: 文字列置換
  _M->_: バッファの末尾へ移動    _C-x SPC_: C-o > 空白挿入            _C-x r_: emacs restart
  _M-f_: 次の単語へ移動                : C-t 文字列 > 文字列置換     _M-x sort-lines_: 選択領域の並び替え
  _M-b_: 前の単語へ移動         _M-k_: 行を切り取り                   _M-<f10>_: fullscreen/default
  _M-C-a_: 関数定義の先頭へ移動  _M-SPC_: 連続スペースを1つにまとめる   _C-x x t_: toggle-truncate-lines
  _M-C-e_: 関数定義の末尾へ移動  _M-C-h_: 関数単位で選択               _C-c n_: flymake next error
  _M-C-n_: 次の括弧終わりへ移動  _C-x C-r_: Recentfの起動             _C-c p_: flymake prev error
  _M-C-p_: 前の括弧始まりへ移動                                       _C-x C-n_: dired-sidebar-toggle-sidebar
                                                               _C-x C-l_: pandoc-markdown-pdf
                                                               _C-c h_: toggle-display-fill-column-indicator-mode
  "
    ;; Move
    ("M-<" beginning-of-buffer)
    ("M->" end-of-buffer)
    ("M-f" forward-word)
    ("M-b" backward-word)
    ("M-C-a" c-beginning-of-defun)
    ("M-C-e" c-end-of-defun)
    ("M-C-n" forward-list)
    ("M-C-p" backward-list)
    ;; Select
    ("C-x h" mark-whole-buffer)
    ("C-x SPC" rectangle-mark-mode)
    ("M-k" kill-sentence)
    ("M-SPC" just-one-space)
    ("M-C-h" c-mark-function)
    ("C-x C-r" recentf-open-files)
    ;; Others
    ("M-x replace-string" replace-string)
    ("C-x r" restart-emacs)
    ("M-x sort-lines" sort-lines)
    ("M-<f10>" toggle-frame-maximized)
    ("C-x x t" toggle-truncate-lines)
    ("C-c n" flymake-goto-next-error)
    ("C-c p" flymake-goto-prev-error)
    ("C-x C-n" dired-sidebar-toggle-sidebar)
    ("C-x C-l" pandoc-markdown-pdf)
    ("C-c h" toggle-display-fill-column-indicator-mode))
#+end_src

* server configuration for emacsclient
** server
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (use-package server
      :defer 0.01
      :config (server-start)
      ;; Assign kill buffer to C-x C-c
      ;; NOTE : Until 29.4 I used [kill-this-buffer], but since 30.1 I can't turn off the buffer except via the menu.
      ;; To solve this problem, [kill-current-buffer] is used.
      ;; It was mentioned as a bug, but it was closed after the description to use [kill-current-buffer] was written in the document.
      ;; https://emacs.stackexchange.com/a/55047
      ;; https://lists.gnu.org/archive/html/bug-gnu-emacs/2024-06/msg00840.html
      (global-set-key (kbd "C-x C-c") #'kill-current-buffer)
      ;; Allow Emacs to exit with M-x exit
      (defalias 'exit 'save-buffers-kill-emacs)
      ;; yes/no query on exit
      (setq confirm-kill-emacs 'yes-or-no-p)))
#+end_src

** restart-emacs
Windows11 ではrestart-emacsがうまく動作しない場合がある  
プロセスは終了するが、立ち上がってこない  
理由は不明だが、runemacs.exeの起動時引数に"--debug-init"や"-Q"などを指定するとうまく再起動が出来る  
何か引数が無いとダメなようだ。30.1でこの現象は再現済み  
#+begin_src emacs-lisp
  (when (>= emacs-major-version 29)
    (global-set-key (kbd "C-x r") #'restart-emacs))
#+end_src

* org
** org-mode
org本体
ensure nilしてパッケージをmelpaなどから取得しないようにした
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :defer 1
    :init
    (setq org-return-follows-link t) ; Returnキーでリンク先を開く
    (setq org-mouse-1-follows-link t) ; マウスクリックでリンク先を開く
    (setq org-log-done 'time) ; org-logを有効化し、タスクのステータスが変わった時間を記録する
    (setq org-log-into-drawer t) ; org-logの記録をドロワーで隠す
    ;; Learn about the ! and more by reading the relevant section of the
    ;; Org manual. Evaluate: (info "(org) Tracking TODO state changes")
    (setq org-todo-keywords
          '((sequence "TODO(t)" "WAIT(w!)" "|" "CANCEL(c!)" "DONE(d!)"))))

  ;;  アンダースコアを入力しても下付き文字にならないようにする
  (setq org-use-sub-superscripts '{}
        org-export-with-sub-superscripts nil)
#+end_src

** org-indent
たぶん、orgに含まれている
#+begin_src emacs-lisp
  (use-package org-indent
    :hook (org-mode . org-indent-mode)
    :ensure nil)
#+end_src

** org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :after org
    :config
    (setopt
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")

    ;; Ellipsis styling
    (setopt org-ellipsis "…")
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)

    ;; Choose some fonts
    (set-face-attribute 'default nil :family "Iosevka NF")
    (set-face-attribute 'variable-pitch nil :family "Iosevka NFP")
    (set-face-attribute 'org-modern-symbol nil :family "Iosevka NF")

    ;; Add frame borders and window dividers
    (modify-all-frames-parameters
     '((right-divider-width . 40)
       (internal-border-width . 40)))
    (dolist (face '(window-divider
                    window-divider-first-pixel
                    window-divider-last-pixel))
      (face-spec-reset-face face)
      (set-face-foreground face (face-attribute 'default :background)))
    (set-face-background 'fringe (face-attribute 'default :background))

    (global-org-modern-mode))
#+end_src

** org-modern-indent
#+begin_src emacs-lisp
  (use-package org-modern-indent
    :vc ( :fetcher github :repo "jdtsmith/org-modern-indent")
    :config
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

* Others
** keycast
[[https://github.com/tarsius/keycast]]
[[https://protesilaos.com/emacs/dotemacs]]
5.3.1. The prot-emacs-modeline.el section about keycast
#+begin_src emacs-lisp
  (use-package keycast
    :defer 1
    :commands (keycast-mode-line-mode keycast-header-line-mode keycast-tab-bar-mode keycast-log-mode)
    :init
    (setq keycast-mode-line-format "%2s%k%c%R")
    (setq keycast-mode-line-window-predicate 'mode-line-window-selected-p)
    (setq keycast-mode-line-remove-tail-elements nil)
    (keycast-mode-line-mode)
    :config
    (dolist (input '(self-insert-command org-self-insert-command))
      (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

    (dolist (event '( mouse-event-p mouse-movement-p mwheel-scroll handle-select-window
                      mouse-set-point mouse-drag-region))
      (add-to-list 'keycast-substitute-alist `(,event nil))))
#+end_src

** time(Display current time)
モードラインに現在の時間を表示する
[[https://github.com/emacs-mirror/emacs/blob/master/lisp/time.el]]
[[https://protesilaos.com/emacs/dotemacs]]
5.2.16. The prot-emacs-essentials.el configurations for the date and time (display-time-mode)
#+begin_src emacs-lisp
  (use-package time
    :hook (after-init . display-time-mode)
    :config
    (setq display-time-format " %a %e %b, %H:%M ")
    ;;;; Covered by `display-time-format'
    ;; (setq display-time-24hr-format t)
    ;; (setq display-time-day-and-date t)
    (setq display-time-interval 60)
    (setq display-time-default-load-average nil)
    ;; NOTE 2022-09-21: For all those, I have implemented my own solution
    ;; that also shows the number of new items, although it depends on
    ;; notmuch: the `notmuch-indicator' package.
    (setq display-time-mail-directory nil)
    (setq display-time-mail-function nil)
    (setq display-time-use-mail-icon nil)
    (setq display-time-mail-string nil)
    (setq display-time-mail-face nil)

    ;; I don't need the load average and the mail indicator, so let this
    ;; be simple:
    (setq display-time-string-forms
          '((propertize
             (format-time-string display-time-format now)
             'face 'display-time-date-and-time
             'help-echo (format-time-string "%a %b %e, %Y" now))
            " ")))
#+end_src

** 水平分割よりも垂直分割を優先するような設定
#+begin_src emacs-lisp
  (setq split-width-threshold 160)
  (setq split-height-threshold nil)
#+end_src

** Display a bar that clearly indicates the number of characters per line
#+begin_src emacs-lisp
  (setq-default display-fill-column-indicator-column 100)
#+end_src

** 画面の100文字目あたりに線を出す設定
#+begin_src emacs-lisp
  (global-display-fill-column-indicator-mode)
#+end_src

** bufferlistのひとつ前 or 次 へ移動するキーバインド
現在のバッファからひとつ前、ひとつ後へ移動する
#+begin_src emacs-lisp
(global-set-key (kbd "M-[") 'switch-to-prev-buffer)
(global-set-key (kbd "M-]") 'switch-to-next-buffer)
#+end_src

** org to markdown出力時、titleがあったら「# title」を追加する関数
#+begin_src emacs-lisp
  (with-eval-after-load 'ox-md
    ;; org-md-template (CONTENTS INFO) の返り値冒頭にタイトルを挿入
    (defun my/org-md-template-prepend-title (orig-fun contents info)
      (let* ((res   (funcall orig-fun contents info))
             ;; Org 側にタイトルがあれば取得
             (raw-title (plist-get info :title))
             ;; Org の書式（句読点やマクロ等）を展開
             (title (and raw-title (org-export-data raw-title info))))
        (if (and title (plist-get info :with-title))
            (concat "# " title "\n\n" res)
          res)))
    (advice-add 'org-md-template :around #'my/org-md-template-prepend-title))
#+end_src

** footer
#+begin_src emacs-lisp
  ;;(profiler-report)
  ;;(profiler-stop)

  (provide 'init)
#+end_src
